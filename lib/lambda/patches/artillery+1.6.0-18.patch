diff --git a/node_modules/artillery/core/lib/runner.js b/node_modules/artillery/core/lib/runner.js
index 27348a1..e9f2afd 100644
--- a/node_modules/artillery/core/lib/runner.js
+++ b/node_modules/artillery/core/lib/runner.js
@@ -45,7 +45,7 @@ function runner(script, payload, options, callback) {
     periodicStats: script.config.statsInterval || 10,
     mode: script.config.mode || 'uniform'
   },
-  options);
+    options);
 
   let warnings = {
     plugins: {
@@ -59,7 +59,7 @@ function runner(script, payload, options, callback) {
     }
   };
 
-  _.each(script.config.phases, function(phaseSpec) {
+  _.each(script.config.phases, function (phaseSpec) {
     phaseSpec.mode = phaseSpec.mode || script.config.mode;
   });
 
@@ -74,7 +74,7 @@ function runner(script, payload, options, callback) {
       ];
     } else {
       script.config.payload = payload;
-      _.each(script.config.payload, function(el) {
+      _.each(script.config.payload, function (el) {
         el.reader = createReader(el.order);
       });
     }
@@ -85,7 +85,7 @@ function runner(script, payload, options, callback) {
   let runnableScript = _.cloneDeep(script);
 
   // Flatten flows (can have nested arrays of request specs with YAML references):
-  _.each(runnableScript.scenarios, function(scenarioSpec) {
+  _.each(runnableScript.scenarios, function (scenarioSpec) {
     scenarioSpec.flow = _.flatten(scenarioSpec.flow);
   });
 
@@ -95,29 +95,29 @@ function runner(script, payload, options, callback) {
   // load engines:
   //
   let runnerEngines = _.map(
-      Object.assign({}, Engines, runnableScript.config.engines),
-      function loadEngine(engineConfig, engineName) {
-        let moduleName = 'artillery-engine-' + engineName;
-        try {
-          if (Engines[engineName]) {
-            moduleName = './engine_' + engineName;
-          }
-          let Engine = require(moduleName);
-          let engine = new Engine(runnableScript, ee, engineUtil);
-          engine.__name = engineName;
-          return engine;
-        } catch (err) {
-          console.log(
-              'WARNING: engine %s specified but module %s could not be loaded',
-              engineName,
-              moduleName);
-          console.log(err.stack);
-          warnings.engines[engineName] = {
-            message: 'Could not load',
-            error: err
-          };
+    Object.assign({}, Engines, runnableScript.config.engines),
+    function loadEngine(engineConfig, engineName) {
+      let moduleName = 'artillery-engine-' + engineName;
+      try {
+        if (Engines[engineName]) {
+          moduleName = './engine_' + engineName;
         }
+        let Engine = require(moduleName);
+        let engine = new Engine(runnableScript, ee, engineUtil);
+        engine.__name = engineName;
+        return engine;
+      } catch (err) {
+        console.log(
+          'WARNING: engine %s specified but module %s could not be loaded',
+          engineName,
+          moduleName);
+        console.log(err.stack);
+        warnings.engines[engineName] = {
+          message: 'Could not load',
+          error: err
+        };
       }
+    }
   );
 
   //
@@ -143,6 +143,7 @@ function runner(script, payload, options, callback) {
   debug('require paths: ', requirePaths);
 
   runnableScript.config.plugins = runnableScript.config.plugins || {};
+  console.log('ARTILLERY - PLUGINS:', JSON.stringify(runnableScript.config.plugins, null, 2));
 
   if (process.env.ARTILLERY_PLUGINS) {
     let additionalPlugins = {};
@@ -159,17 +160,21 @@ function runner(script, payload, options, callback) {
   _.each(runnableScript.config.plugins, function tryToLoadPlugin(pluginConfig, pluginName) {
     let pluginConfigScope = pluginConfig.scope || runnableScript.config.pluginsScope;
     let pluginPrefix = pluginConfigScope ? pluginConfigScope : 'artillery-plugin-';
+    console.log('ARTILLERY - PLUGIN PREFIX:', pluginPrefix);
     let requireString = pluginPrefix + pluginName;
+    console.log('ARTILLERY - REQUIRE STRING:', requireString);
     let Plugin, plugin;
 
-    requirePaths.forEach(function(rp) {
+    requirePaths.forEach(function (rp) {
       try {
         Plugin = require(path.join(rp, requireString));
         if (typeof Plugin === 'function') {
+          console.log('ARTILLERY - PLUGIN INTERFACE V1');
           // Plugin interface v1
           plugin = new Plugin(runnableScript.config, ee);
           plugin.__name = pluginName;
         } else if (typeof Plugin === 'object' && typeof Plugin.Plugin === 'function') {
+          console.log('ARTILLERY - PLUGIN INTERFACE V2');
           // Plugin interface 2+
           plugin = new Plugin.Plugin(runnableScript, ee, options);
           plugin.__name = pluginName;
@@ -188,13 +193,14 @@ function runner(script, payload, options, callback) {
         message: 'Could not load'
       };
     } else {
+      console.log('ARTILLERY - PLUGIN', pluginName, 'LOADED FROM', requireString);
       debug('Plugin %s loaded from %s', pluginName, requireString);
       runnerPlugins.push(plugin);
     }
   });
 
-  const promise = new Promise(function(resolve, reject) {
-    ee.run = function() {
+  const promise = new Promise(function (resolve, reject) {
+    ee.run = function () {
       let runState = {
         pendingScenarios: 0,
         pendingRequests: 0,
@@ -205,6 +211,7 @@ function runner(script, payload, options, callback) {
         engines: runnerEngines
       };
       debug('run() with: %j', runnableScript);
+      console.log('ARTILLERY - RUN STATE:', JSON.stringify(runState, null, 2))
       run(runnableScript, ee, opts, runState);
     };
 
@@ -212,9 +219,9 @@ function runner(script, payload, options, callback) {
       // allow plugins to cleanup
       A.eachSeries(
         runnerPlugins,
-        function(plugin, next) {
+        function (plugin, next) {
           if (plugin.cleanup) {
-            plugin.cleanup(function(err) {
+            plugin.cleanup(function (err) {
               if (err) {
                 debug(err);
               }
@@ -224,7 +231,7 @@ function runner(script, payload, options, callback) {
             return next();
           }
         },
-        function(err) {
+        function (err) {
           return done(err);
         });
     };
@@ -248,16 +255,16 @@ function run(script, ee, options, runState) {
   let aggregate = [];
 
   let phaser = createPhaser(script.config.phases);
-  phaser.on('arrival', function() {
+  phaser.on('arrival', function () {
     runScenario(script, intermediate, runState);
   });
-  phaser.on('phaseStarted', function(spec) {
+  phaser.on('phaseStarted', function (spec) {
     ee.emit('phaseStarted', spec);
   });
-  phaser.on('phaseCompleted', function(spec) {
+  phaser.on('phaseCompleted', function (spec) {
     ee.emit('phaseCompleted', spec);
   });
-  phaser.on('done', function() {
+  phaser.on('done', function () {
     debug('All phases launched');
 
     const doneYet = setInterval(function checkIfDone() {
@@ -285,6 +292,7 @@ function run(script, ee, options, runState) {
   const periodicStatsTimer = setInterval(sendStats, options.periodicStats * 1000);
 
   function sendStats() {
+    console.log('ARTILLERY - EMITTING STATS')
     aggregate.push(intermediate.clone());
     intermediate._concurrency = runState.pendingScenarios;
     intermediate._pendingRequests = runState.pendingRequests;
@@ -302,7 +310,7 @@ function runScenario(script, intermediate, runState) {
   // Compile scenarios if needed
   //
   if (!runState.compiledScenarios) {
-    _.each(script.scenarios, function(scenario) {
+    _.each(script.scenarios, function (scenario) {
       if (!scenario.weight) {
         scenario.weight = 1;
       }
@@ -311,24 +319,24 @@ function runScenario(script, intermediate, runState) {
     runState.picker = wl(script.scenarios);
 
     runState.scenarioEvents = new EventEmitter();
-    runState.scenarioEvents.on('customStat', function(stat) {
+    runState.scenarioEvents.on('customStat', function (stat) {
       intermediate.addCustomStat(stat.stat, stat.value);
     });
-    runState.scenarioEvents.on('started', function() {
+    runState.scenarioEvents.on('started', function () {
       runState.pendingScenarios++;
     });
-    runState.scenarioEvents.on('error', function(errCode) {
+    runState.scenarioEvents.on('error', function (errCode) {
       intermediate.addError(errCode);
     });
-    runState.scenarioEvents.on('request', function() {
+    runState.scenarioEvents.on('request', function () {
       intermediate.newRequest();
 
       runState.pendingRequests++;
     });
-    runState.scenarioEvents.on('match', function() {
+    runState.scenarioEvents.on('match', function () {
       intermediate.addMatch();
     });
-    runState.scenarioEvents.on('response', function(delta, code, uid) {
+    runState.scenarioEvents.on('response', function (delta, code, uid) {
       intermediate.completedRequest();
       intermediate.addLatency(delta);
       intermediate.addCode(code);
@@ -340,21 +348,21 @@ function runScenario(script, intermediate, runState) {
     });
 
     runState.compiledScenarios = _.map(
-        script.scenarios,
-        function(scenarioSpec) {
-          const name = scenarioSpec.engine || 'http';
-          const engine = runState.engines.find((e) => e.__name === name);
-          return engine.createScenario(scenarioSpec, runState.scenarioEvents);
-        }
+      script.scenarios,
+      function (scenarioSpec) {
+        const name = scenarioSpec.engine || 'http';
+        const engine = runState.engines.find((e) => e.__name === name);
+        return engine.createScenario(scenarioSpec, runState.scenarioEvents);
+      }
     );
   }
 
   let i = runState.picker()[0];
 
   debug('picking scenario %s (%s) weight = %s',
-        i,
-        script.scenarios[i].name,
-        script.scenarios[i].weight);
+    i,
+    script.scenarios[i].name,
+    script.scenarios[i].weight);
 
   intermediate.newScenario(script.scenarios[i].name || i);
 
@@ -363,7 +371,7 @@ function runScenario(script, intermediate, runState) {
   const finish = process.hrtime(start);
   const runScenarioDelta = (finish[0] * 1e9) + finish[1];
   debugPerf('runScenarioDelta: %s', Math.round(runScenarioDelta / 1e6 * 100) / 100);
-  runState.compiledScenarios[i](scenarioContext, function(err, context) {
+  runState.compiledScenarios[i](scenarioContext, function (err, context) {
     runState.pendingScenarios--;
     if (err) {
       debug(err);
@@ -396,9 +404,9 @@ function createContext(script) {
   // variables from payloads
   //
   if (script.config.payload) {
-    _.each(script.config.payload, function(el) {
+    _.each(script.config.payload, function (el) {
       let row = el.reader(el.data);
-      _.each(el.fields, function(fieldName, j) {
+      _.each(el.fields, function (fieldName, j) {
         result.vars[fieldName] = row[j];
       });
     });
@@ -408,7 +416,7 @@ function createContext(script) {
   // inline variables
   //
   if (script.config.variables) {
-    _.each(script.config.variables, function(v, k) {
+    _.each(script.config.variables, function (v, k) {
       let val;
       if (_.isArray(v)) {
         val = _.sample(v);
